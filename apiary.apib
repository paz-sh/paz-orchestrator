FORMAT: 1A
HOST: http://paz-orchestrator.paz

# paz-orchestrator
The service that ties together the various components of the paz platform, providing cluster administration and health monitoring of clusters, hosts and services.

# Group Cluster
An isolated collection of machines for a particular purpose, e.g. dev, integration, qa, user-testing, staging and production.

For now, there is only one cluster.

## Cluster [/cluster]
A single cluster object with all its details.

### Retrieve a cluster [GET]
+ Response 200 (application/json)

    + Body

            {
                "hostCount": 5
            }

# Group Host
A host within a cluster.

## Host Collection [/cluster/hosts]

### List all hosts [GET]
+ Response 200 (application/json)

    + Body

            [
                {
                    "ID: "eb3691885bdc473f92a5d69de942b81",
                    "PublicIP": "172.17.8.102",
                    "Metadata": {},
                    "Version": "0.5.0",
                    "units": ['unit1', 'unit2', 'unit3'],
                    "TotalResources": {
                        "Cores": 100,
                        "Memory": 998,
                        "Disk": 0
                    }
                }
            ]

## Host [/cluster/hosts/{id}]
A single host with all its details.

### Retrieve a host [GET]
+ Response 200 (application/json)

    + Body

            {
                "ID": "eb3691885bdc473f92a5d69de942b814",
                "PublicIP": "172.17.8.102",
                "Metadata": {},
                "Version": "0.5.0",
                "units": ['unit1', 'unit2', 'unit3'],
                "TotalResources": {
                    "Cores": 100,
                    "Memory": 998,
                    "Disk": 0
                }
            }

## Host health [/cluster/host/{id}/health]
Health information for a host.

TBD

### Get host health [GET]
+ Response 200 (application/json)

    + Body

            {
                "healthy": true
            }

# Group Unit
A unit running on a CoreOS cluster.

## Unit Collection [/cluster/units]

### List all units [GET]
+ Response 200 (application/json)

    + Body

            [
                {
                    "name": "api-1.0.1-1"
                    "service": "api",
                    "version": "1.0.1",
                    "instance": 1,
                    "activeState": "failed",
                    "loadState": "loaded",
                    "machineState": {
                        "ID": "eb3691885bdc473f92a5d69de942b814",
                        "Metadata": {},
                        "PublicIP": "172.17.8.102",
                        "TotalResources": {
                            "Cores": 100,
                            "Disk": 0,
                            "Memory": 998
                        },
                        "Version": "0.5.0"
                    },
                    "subState": "failed"
                }
            ]

## Unit [/cluster/units/{id}]
A single unit with all its details.

### Retrieve a host [GET]
+ Response 200 (application/json)

    + Body

            {
                "name": "api-1.0.1-1"
                "service": "api",
                "version": "1.0.1",
                "instance": 1,
                "activeState": "failed",
                "loadState": "loaded",
                "machineState": {
                    "ID": "eb3691885bdc473f92a5d69de942b814",
                    "Metadata": {},
                    "PublicIP": "172.17.8.102",
                    "TotalResources": {
                        "Cores": 100,
                        "Disk": 0,
                        "Memory": 998
                    },
                    "Version": "0.5.0"
                },
                "subState": "failed"
            }$

# Group Load Balancers
A list of load balancers within the cluster deployed by paz.

TBD.

## Load Balancer Collection [/cluster/load-balancers]

### List all load balancers [GET]
+ Response 200 (application/json)

    + Body

            [
                {
                    "id": "6770361ab0b049eda35d4ac58d9043d5",
                    "service": "api",
                    "backends": {
                        "current": {
                            "version": "1.0.1",
                            "weighting": 85,
                            "hosts": [
                                {
                                    "unit": "api-1.0.1-1",
                                    "host": "172.17.9.101",
                                    "port": "49165",
                                    "haproxy": {
                                        "name": "HAProxy",
                                        "version": "1.4.18",
                                        "release_data": "2011/09/16",
                                        "nbproc": "1",
                                        "process_num": "1",
                                        "pid": "30984",
                                        "uptime": "0d 2h01m42s",
                                        "uptime_sec": "7302",
                                        "mem_max_mb": "0",
                                        "ulimit_n": "8210",
                                        "max_sock": "8210",
                                        "max_conn": "4096",
                                        "max_pipes": "0",
                                        "current_conns": "2",
                                        "pipes_used": "0",
                                        "pipes_free": "0",
                                        "tasks": "5",
                                        "run_queue": "1",
                                        "node": "haproxyserver-0",
                                        "development": ""
                                    }
                                },
                                {
                                    "unit": "api-1.0.1-2",
                                    "host": "172.17.8.102",
                                    "port": "49166",
                                    "haproxy": {
                                        "name": "HAProxy",
                                        "version": "1.4.18",
                                        "release_data": "2011/09/16",
                                        "nbproc": "1",
                                        "process_num": "1",
                                        "pid": "30984",
                                        "uptime": "0d 2h01m42s",
                                        "uptime_sec": "7302",
                                        "mem_max_mb": "0",
                                        "ulimit_n": "8210",
                                        "max_sock": "8210",
                                        "max_conn": "4096",
                                        "max_pipes": "0",
                                        "current_conns": "2",
                                        "pipes_used": "0",
                                        "pipes_free": "0",
                                        "tasks": "5",
                                        "run_queue": "1",
                                        "node": "haproxyserver-0",
                                        "development": ""
                                    }
                                },
                                {
                                    "unit": "api-1.0.1-3",
                                    "host": "172.17.8.103",
                                    "port": "49167",
                                    "haproxy": {
                                        "name": "HAProxy",
                                        "version": "1.4.18",
                                        "release_data": "2011/09/16",
                                        "nbproc": "1",
                                        "process_num": "1",
                                        "pid": "30984",
                                        "uptime": "0d 2h01m42s",
                                        "uptime_sec": "7302",
                                        "mem_max_mb": "0",
                                        "ulimit_n": "8210",
                                        "max_sock": "8210",
                                        "max_conn": "4096",
                                        "max_pipes": "0",
                                        "current_conns": "2",
                                        "pipes_used": "0",
                                        "pipes_free": "0",
                                        "tasks": "5",
                                        "run_queue": "1",
                                        "node": "haproxyserver-0",
                                        "development": ""
                                    }
                                }
                            ]
                        },
                        "next": {
                            "version": "1.0.2",
                            "weighting": 15,
                            "hosts": [
                                {
                                    "unit": "api-1.0.2-1",
                                    "host": "172.17.9.101",
                                    "port": "49168",
                                    "sessions": 3,
                                    "queuedRequests": 2
                                },
                                {
                                    "unit": "api-1.0.2-2",
                                    "host": "172.17.8.102",
                                    "port": "49169",
                                    "sessions": 2,
                                    "queuedRequests": 1
                                },
                                {
                                    "unit": "api-1.0.2-3",
                                    "host": "172.17.8.103",
                                    "port": "49170",
                                    "sessions": 1,
                                    "queuedRequests": 0
                                }
                            ]
                        }
                    },
                }
            ]

## Load Balancer [/cluster/load-balancers/{id}]
A single load balancer with all its details.

TBD

### Retrieve a load balancer [GET]
+ Response 200 (application/json)

    + Body

            {
                "id": "6770361ab0b049eda35d4ac58d9043d5",
                "service": "api",
                "backends": {
                    "current": {
                        "version": "1.0.1",
                        "weighting": 85,
                        "hosts": [
                            {
                                "unit": "api-1.0.1-1",
                                "host": "172.17.9.101",
                                "port": "49165",
                                "sessions": 5,
                                "queuedRequests": 3
                            },
                            {
                                "unit": "api-1.0.1-2",
                                "host": "172.17.8.102",
                                "port": "49166",
                                "sessions": 3,
                                "queuedRequests": 2
                            },
                            {
                                "unit": "api-1.0.1-3",
                                "host": "172.17.8.103",
                                "port": "49167",
                                "sessions": 2,
                                "queuedRequests": 1
                            }
                        ]
                    },
                    "next": {
                        "version": "1.0.2",
                        "weighting": 15,
                        "hosts": [
                            {
                                "unit": "api-1.0.2-1",
                                "host": "172.17.9.101",
                                "port": "49168",
                                "sessions": 3,
                                "queuedRequests": 2
                            },
                            {
                                "unit": "api-1.0.2-2",
                                "host": "172.17.8.102",
                                "port": "49169",
                                "sessions": 2,
                                "queuedRequests": 1
                            },
                            {
                                "unit": "api-1.0.2-3",
                                "host": "172.17.8.103",
                                "port": "49170",
                                "sessions": 1,
                                "queuedRequests": 0
                            }
                        ]
                    }
                },
            }

# Group DNS
DNS entries configured by paz.

TBD.

## DNS Collection [/cluster/dns]

### List all DNS entries configured by paz [GET]
+ Response 200 (application/json)

    + Body

            [
                {
                    "service": "api",
                    "domain": "api.mydomain.com",
                    "loadBalancer": "6770361ab0b049eda35d4ac58d9043d5"
                }
            ]

## DNS [/cluster/dns/{service}]
A single DNS thing with all its details.

TBD

### Retrieve a DNS thing [GET]
+ Response 200 (application/json)

    + Body

            {
                "service": "api",
                "domain": "api.mydomain.com",
                "loadBalancer": "6770361ab0b049eda35d4ac58d9043d5"
            }

# Group Service
A service registered in the service directory. Most of the data is directly taken from the service directory, but the Orchestrator does store a few additional pieces of information about running instances.

## Service Collection [/services]

### List all services [GET]
+ Response 201 (application/json)

    + Body

            [
                {
                    "name": "api-service",
                    "description": "API service for some platform",
                    "dockerRepository": "lukebond/my-service"
                },
                "config": {
                    "last": {},
                    "next": {
                        "publicFacing": true,
                        "ports": [
                            {
                                "container": 9000,
                                "host": 80
                            }
                        ],
                        "env": {
                            "key": "value"
                        },
                        "numInstances": 3
                    }
                }
            ]

### Create service [POST]

+ Request

    + Body

            {
                "name": "api-service",
                "description": "API service for some platform",
                "dockerRepository": "lukebond/my-service",
                "publicFacing": true,
                "ports": [
                    {
                        "container": 9000,
                        "host": 80
                    }
                ],
                "env": {
                  "key": "value"
                },
                "numInstances": 1
            }

+ Response 200 (application/json)

            {
                "name": "api-service",
                "description": "API service for some platform",
                "dockerRepository": "lukebond/my-service",
                "config": {
                    "last": {},
                    "next": {
                        "publicFacing": true,
                        "ports": [
                            {
                                "container": 9000,
                                "host": 80
                            }
                        ],
                        "env": {
                            "key": "value"
                        },
                        "numInstances": 3
                    }
                }
            }

## Service [/services/{name}]
A single service object.

+ Parameters
    + name (required, string, `api`) ... unique name of the service.

### Retrieve a service [GET]
+ Response 200 (application/json)

    + Body

            {
                "name": "api",
                "description": "Test service",
                "dockerImage": "lukebond/my-service"
            },
            "config": {
                "last": {},
                "next": {
                    "publicFacing": true,
                    "ports": [
                        {
                            "container": 9000,
                            "host": 80
                        }
                    ],
                    "env": {
                        "key": "value"
                    },
                    "numInstances": 3
                }
            }

### Remove a service [DELETE]
+ Response 204

# Group Service Config

## Last Config [/services/{name}/config/last]

### Retrieve Last Deployed Config [GET]

+ Response 200 (application/json)

    + Body

            {
                "publicFacing": true,
                "ports": [
                    {
                        "container": 9000,
                        "host": 80
                    }
                ],
                "env": {
                    "key": "value"
                },
                "numInstances": 3
            }

## Next Config [/services/{name}/config/next]

### Retrieve Next Config [GET]

+ Response 200 (application/json)

    + Body

            {
                "publicFacing": true,
                "ports": [
                    {
                        "container": 9000,
                        "host": 80
                    }
                ],
                "env": {
                    "key": "value"
                },
                "numInstances": 3
            }

### Modify next config [PATCH]
.

+ Request (application/json)

    + Body

            {
              "publicFacing": false 
            }

+ Response 200 (application/json)

    + Body

            {
                "publicFacing": false,
                "ports": [
                    {
                        "container": 9000,
                        "host": 80
                    }
                ],
                "env": {
                    "key": "value"
                },
                "numInstances": 3
            }


## Config History [/services/{name}/config/history]

### Retrieve Config History [GET]
+ Response 200 (application/json)

    + Body

            {
                "1.0.0": {
                    "publicFacing": true,
                    "ports": [
                        {
                            "container": 9000,
                            "host": 80
                        }
                    ],
                    "env": {
                        "key": "value"
                    },
                    "numInstances": 3
                },
                "1.0.1": {
                    "publicFacing": true,
                    "ports": [
                        {
                            "container": 9000,
                            "host": 80
                        }
                    ],
                    "env": {
                        "key": "value"
                    },
                    "numInstances": 3
                }
            }

## Config Version [/services/{name}/config/history/{version}]

+ Parameters
    + version (required, string, `1.0.1`) ... version of the config to retrieve.

### Retrieve Config of Deployed Version [GET]
+ Response 200 (application/json)

    + Body

            {
                "publicFacing": true,
                "ports": [
                    {
                        "container": 9000,
                        "host": 80
                    }
                ],
                "env": {
                    "key": "value"
                },
                "numInstances": 3
            }

# Group Service Units

## Running units [/services/{name}/units]
A running instance of this service in the cluster.

### Retrieve units of service [GET]
+ Response 200 (application/json)

    + Body

            [
                {
                    "name": "api-1.0.1-1"
                    "service": "api",
                    "version": "1.0.1",
                    "instance": 1,
                    "activeState": "failed",
                    "loadState": "loaded",
                    "machineState": {
                        "ID": "eb3691885bdc473f92a5d69de942b814",
                        "Metadata": {},
                        "PublicIP": "172.17.8.102",
                        "TotalResources": {
                            "Cores": 100,
                            "Disk": 0,
                            "Memory": 998
                        },
                        "Version": "0.5.0"
                    },
                    "subState": "failed"
                }
            ]

## Running unit [/services/{name}/units/{id}]
A running instance of a service in the cluster.

+ Parameters
    + id (required, string, `api-1.0.1-1`) ... unique name of the unit.

### Retrieve units of service [GET]
+ Response 200 (application/json)

    + Body

            {
                "name": "api-1.0.1-1"
                "service": "api",
                "version": "1.0.1",
                "instance": 1,
                "activeState": "failed",
                "loadState": "loaded",
                "machineState": {
                    "ID": "eb3691885bdc473f92a5d69de942b814",
                    "Metadata": {},
                    "PublicIP": "172.17.8.102",
                    "TotalResources": {
                        "Cores": 100,
                        "Disk": 0,
                        "Memory": 998
                    },
                    "Version": "0.5.0"
                },
                "subState": "failed"
            }

## Unit health [/services/{name}/units/{id}/health]
Basic health information for a running unit.

### Retrieve unit health [GET]
+ Response 200 (application/json)

    + Body

            {
                "healthy": true
            }
